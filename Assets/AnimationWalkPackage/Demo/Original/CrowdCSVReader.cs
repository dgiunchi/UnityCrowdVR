// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using System.IO;

public class CrowdCSVReader
{
    public class Row
    {
        public string id;
        public string gid;
        public string x;
        public string y;
        public string dir_x;
        public string dir_y;
        public string radius;
        public string time;

    }

    List<Row> rowList = new List<Row>();
    bool isLoaded = false;

    public bool IsLoaded()
    {
        return isLoaded;
    }

    public List<Row> GetRowList()
    {
        return rowList;
    }

    public void Load(TextAsset csv)
    {
        rowList.Clear();
        string[][] grid = CsvParser2.Parse(csv.text);
        for (int i = 1; i < grid.Length; i++)
        {
            Row row = new Row();
            row.id = grid[i][0];
            row.gid = grid[i][1];
            row.x = grid[i][2];
            row.y = grid[i][3];
            row.dir_x = grid[i][4];
            row.dir_y = grid[i][5];
            row.radius = grid[i][6];
            row.time = grid[i][7];

            rowList.Add(row);
        }
        isLoaded = true;
    }

    public void Load(string path)
    {
        rowList.Clear();

        string text = File.ReadAllText(path);
        string[][] grid = CsvParser2.Parse(text);
        for (int i = 1; i < grid.Length; i++)
        {
            Row row = new Row();
            row.id = grid[i][0];
            row.gid = grid[i][1];
            row.x = grid[i][2];
            row.y = grid[i][3];
            row.dir_x = grid[i][4];
            row.dir_y = grid[i][5];
            row.radius = grid[i][6];
            row.time = grid[i][7];

            rowList.Add(row);
        }
        isLoaded = true;
    }

    public int NumRows()
    {
        return rowList.Count;
    }

    public Row GetAt(int i)
    {
        if (rowList.Count <= i)
            return null;
        return rowList[i];
    }

    public Row Find_id(string find)
    {
        return rowList.Find(x => x.id == find);
    }
    public List<Row> FindAll_id(string find)
    {
        return rowList.FindAll(x => x.id == find);
    }
    public Row Find_gid(string find)
    {
        return rowList.Find(x => x.gid == find);
    }
    public List<Row> FindAll_gid(string find)
    {
        return rowList.FindAll(x => x.gid == find);
    }
    public Row Find_x(string find)
    {
        return rowList.Find(x => x.x == find);
    }
    public List<Row> FindAll_x(string find)
    {
        return rowList.FindAll(x => x.x == find);
    }
    public Row Find_y(string find)
    {
        return rowList.Find(x => x.y == find);
    }
    public List<Row> FindAll_y(string find)
    {
        return rowList.FindAll(x => x.y == find);
    }
    public Row Find_dir_x(string find)
    {
        return rowList.Find(x => x.dir_x == find);
    }
    public List<Row> FindAll_dir_x(string find)
    {
        return rowList.FindAll(x => x.dir_x == find);
    }
    public Row Find_dir_y(string find)
    {
        return rowList.Find(x => x.dir_y == find);
    }
    public List<Row> FindAll_dir_y(string find)
    {
        return rowList.FindAll(x => x.dir_y == find);
    }
    public Row Find_radius(string find)
    {
        return rowList.Find(x => x.radius == find);
    }
    public List<Row> FindAll_radius(string find)
    {
        return rowList.FindAll(x => x.radius == find);
    }
    public Row Find_time(string find)
    {
        return rowList.Find(x => x.time == find);
    }
    public List<Row> FindAll_time(string find)
    {
        return rowList.FindAll(x => x.time == find);
    }

}